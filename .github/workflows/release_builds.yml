#Le but de ce workflow est de : 
#-Se déclencher quand une pull request est merged vers la branche "main"
#-Lancer les builds auto sur toutes les plateformes
#-Aller chercher le nom du dernier tag sur l'historique de git (chercher ''git tag'' sur google au cas)
#-Créer une release sur Github avec dessus: le tag, le changelog.md et les artifacts générés par les builds

name: Create Release
on: 
    workflow_dispatch:
    pull_request:
        types: [closed]

jobs:
  #Phase de build
  buildWindows:
    uses: Dimensions-Softwares/project-destiny/.github/workflows/build_windows.yml@main
    secrets:
        license: ${{ secrets.UNITY_LICENSE }}
    
  buildMac:
    uses: Dimensions-Softwares/project-destiny/.github/workflows/build_osx.yml@main
    secrets:
        license: ${{ secrets.UNITY_LICENSE }}
        
  buildLinux:
    uses: Dimensions-Softwares/project-destiny/.github/workflows/build_linux.yml@main
    secrets:
        license: ${{ secrets.UNITY_LICENSE }}
        
  buildWebGL:
    if: ${{ github.event.label.name == 'Release' }}
    uses: Dimensions-Softwares/project-destiny/.github/workflows/build_webgl.yml@main
    secrets:
        license: ${{ secrets.UNITY_LICENSE }}
        
  #Enfin on créé la release sur github
  createRelease:
    if: ${{ github.event.label.name == 'release' ||  github.event.label == null}}
    needs: [buildWindows, buildMac, buildLinux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code #Pour avoir le changelog (y'en a pas pour l'instant mais normalement il devrait être présent à chaque merge de release)
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 0
          
      - name: Get Builds Artifacts #On DL tous les artifacts générés par les builds qui ont été call juste avant
        uses: actions/download-artifact@v2.1.0
        
      - name: Archive Windows
        uses: thedoctor0/zip-release@master
        with:
            filename: 'StandaloneWindows.zip'
            path: 'StandaloneWindows'
            
      - name: Archive OSX
        uses: thedoctor0/zip-release@master
        with:
            filename: 'StandaloneOSX.zip'
            path: 'StandaloneOSX'
            
      - name: Archive Linux
        uses: thedoctor0/zip-release@master
        with:
            filename: 'StandaloneLinux64.zip'
            path: 'StandaloneLinux64'
        
        
      - name: Get Previous Tag #On va chercher le dernier tag (qui normalement doit être celui de la release) Pour avoir le numéro de la version
        id: previoustag
        if: ${{ github.event.label.name == 'release' ||  github.event.label == null}}
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0
        
      - name: Create Release #On upload le tout sur github
        uses: ncipollo/release-action@v1
        with:
            artifacts: 'StandaloneWindows.zip,StandaloneOSX.zip,StandaloneLinux64.zip'
            bodyFile: 'CHANGELOG.md'
            token: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ steps.previoustag.outputs.tag }}
